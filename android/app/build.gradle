apply plugin: "com.android.application"

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
//    implementation project(':jcore-react-native')
//    implementation project(':jpush-react-native')
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}
/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {

    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.xxcard"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.8"
        // SUB_TYPE       :  1 写死1 当聚道主包
        manifestPlaceholders = [
                JPUSH_APPKEY: "",
                APP_CHANNEL : "default"
        ]

        manifestPlaceholders = [
                   APP_VERSION    : APP_VERSION,
                                   CHANNEL_AFFCODE        : AFF_CODE,
                                   JPUSH_PKGNAME  : APP_ID,
                                   JPUSH_APPKEY   : JPUSH_KEY,
                                   JPUSH_CHANNEL  : "developer-default",
                                   UMENG_KEY      : UMENG_KEY,
                                   UMENG_CHANNEL  : "developer-default",
                                   PLAT_ID        :  PLAT_ID,
                                   PLAT_CH        :  PLAT_CH,
                                   SUB_TYPE       :  SUB_TYPE,
                                   APP_DOWNLOAD_VERSION : APP_DOWNLOAD_VERSION

        ]
        buildConfigField("String", "UMENG_KEY", "\"${UMENG_KEY}\"")
        buildConfigField("String", "WECHAT_KEY", "\"${WECHAT_KEY}\"")
        buildConfigField("String", "WECHAT_SECRET_KEY", "\"${WECHAT_SECRET_KEY}\"")
        multiDexEnabled true
        resValue "string", "app_name", "bbl-sit"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    flavorDimensions "color"


    productFlavors {
        taven {
            applicationId APP_ID
            versionName APP_VERSION
            resValue "string", "app_name", new String(APP_NAME.getBytes("iso8859-1"), "UTF-8")
            manifestPlaceholders = [
                    APP_VERSION    : APP_VERSION,
                    CHANNEL_AFFCODE: AFF_CODE,
                    JPUSH_PKGNAME  : APP_ID,
                    JPUSH_APPKEY   : JPUSH_KEY,
                    JPUSH_CHANNEL  : "developer-default",
                    UMENG_KEY      : UMENG_KEY,
                    UMENG_CHANNEL  : "developer-default",
                    PLAT_ID        : PLAT_ID,
                    PLAT_CH        : PLAT_CH,
                    SUB_TYPE       : SUB_TYPE,
                    APP_DOWNLOAD_VERSION : APP_DOWNLOAD_VERSION
            ]
            dimension "color"
            buildConfigField("String", "UMENG_KEY", "\"${UMENG_KEY}\"")
            buildConfigField("String", "WECHAT_KEY", "\"${WECHAT_KEY}\"")
            buildConfigField("String", "WECHAT_SECRET_KEY", "\"${WECHAT_SECRET_KEY}\"")
        }
    }

    signingConfigs {
        release {
            storeFile file('kot-cards-yy.keystore')
            storePassword 'kotcards2018'
            keyAlias 'yy-cards'
            keyPassword 'kotcards2018'
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "release.apk"
            //       outputFileName = "${variant.productFlavors[0].name}_v${variant.versionName}.apk"
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = ""
//                def apkName = APK_FILE_NAME + ""
//                def affSuffix = AFF_CODE ? "_${AFF_CODE}" : ""
//                if (apkName != null && !apkName.isEmpty()) {
//                    fileName = "${apkName}" + affSuffix + ".apk"
//                } else {
//                    fileName = "${CLIENT_ID}_${variant.productFlavors[0].name}" + affSuffix + ".apk"
//                }
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    compile project(':react-native-picker')
    compile project(':react-native-zip-archive')
    compile project(':react-native-vector-icons')
    compile project(':react-native-toast-native')
    compile project(':react-native-svg')
    compile project(':react-native-splash-screen')
    compile project(':react-native-sound')
    compile project(':react-native-shake-event')
    compile project(':react-native-orientation')
    compile project(':react-native-material-kit')
    compile project(':react-native-interactable')
    compile project(':react-native-image-picker')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-fs')
    compile project(':react-native-flurry-analytics')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-fast-image')
    compile project(':react-native-fabric')
    compile project(':react-native-device-info')
    compile project(':react-native-code-push')
    compile project(':react-native-blur')
    compile project(':jpush-react-native')
    implementation project(':react-native-orientation')
    implementation project(':react-native-zip-archive')
    implementation project(':react-native-flurry-analytics')
    implementation project(':react-native-fabric')
    implementation 'com.android.support:multidex:1.0.3'
    implementation project(':react-native-fs')
    implementation project(':react-native-image-crop-picker')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':jpush-react-native')
    implementation project(':jcore-react-native')
    implementation 'com.android.support:appcompat-v7:26.1.1'
    implementation 'com.umeng.sdk:common:latest.integration'
    implementation 'com.umeng.sdk:analytics:latest.integration'
    // compile 'com.facebook.react:react-native:+'
    implementation project(':ReactAndroid')            //添加React-native项目
    implementation 'com.zhy:okhttputils:2.6.2'
    implementation project(':react-native-toast-native')
    implementation project(':react-native-shake-event')
    implementation project(':react-native-code-push')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-svg')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-sound')
    implementation project(':react-native-material-kit')
    implementation project(':react-native-interactable')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-fetch-blob')
    implementation project(':react-native-device-info')
    implementation project(':react-native-blur')
    implementation project(':react-native-fast-image')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
configurations.all {
    exclude group: 'com.facebook.react', module: 'react-native'
}