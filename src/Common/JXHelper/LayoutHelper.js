/**
 * Created by Sam on 23/10/2018.
 * Copyright © 2018年 JX. All rights reserved.
 */

// const RSA2_PUBLIC_KEY =
//     'WlhsS2RVbHFiMmxPYW1NMVdXMUthRnBFV1RCWmJVVXlXVmRWZUZwVVdYZE5SRkV5VG5wR2JWbHRXWHBOZW1kM1RWZFZNRTVVVW14WmVrMHlUMFJHYUU1SFVtMU5SRkUwVFcxWmVFOVVXVEJPVkdjMFRsUkNhazVFWTNwT2JWbDZUMVJDYkUxWFdteGFSRlY1VFdwQk0wMXFXbXhaVjFKcFdXcFNiVmw2UlhoUFYwMHlXa1JGTUUxWFVUTk9iVVV5VGtkS2FGbFhSbWxhVjBsNlRUSlZNRnBIVVhoT2VtUnJUMFJHYkUxcVdYbE5lbU13VFdwa2JVNTZVbWhPVkdNMFQwUmFiRnBFWXpWUFIwMHdXa2RGTWs5RVFYaGFWMVpvVFZkRk5FNHlWbWxaVjFsNFdsZE9iVTlVVG1wWmJWVTFXVzFXYUU5VVdYaFplbXh0V1RKR2FVNXFUWGROUkUxNlQwUk5lVTVxUW0xWmVrVTFUbXBLYVZwcVFUVlpiVTB6VFVkS2FVNUVhM2xOUkU1dFRXcG5lazB5UlhkTlIwbDNXbXBXYVUxdFRYaFBSMUp0VG1wVmVFOVVTbXhhVkU1clRWUkNiRTVFU21sTlJHY3lUbXBDYTA1dFdUUlphbFV3V2xSa2JVMXFaekphVkdScVdYcENhVmw2Vm10WlYxcHJUbFJPYWxwcVdtcE5SR3hwVGxSRk1rNXFTbXhhUkdNd1QxUlpkMWxxWXpCUFYwa3dUbGROZUU1cVdteGFSRmw0V21wa2FscHFVbTFPYlZVelRsZEZORTFxVW10T1YwcHJUa1JyTTA5RVNUQlBSMGswVGxSck5FMHlXbWxQUjAxNVdrUlJORnBIVW1sYVJFMTZUWHBTYUUxSFZYcFpWRlY1VG5wVmQxcHRXWGhPVkVac1dXcGthMDFVVlRSTmFsRjRUVzFKZDA5WFVteFBWMUV6V1RKTmQwNTZUbWxhVjFFd1RqSk5lVnBYU21oT2VtUnNUVEphYUUxSFJUQk9Na2w0VGxSb2FrNXRWbWxaYlU1c1RXcG9hRnBFVW1oTlZGa3hUMFJSTVUxdFdtcE9SMWw0VG5wR2FrMUVhR2xPYWxwc1RsUlNiVTVFV1hoTlJGVXhUakpOTWsxVVkzaFpWMXBxVFZSYWFsbDZaM2RPUkVKcFdYcEthazFxWXpCT1IxWm9UakphYkZwdFRtbE5la0pxVFcxR2JWcEhTV2xNUTBwc1NXcHZhVTVxVlRGT1ZGVnBURU5LZDBscWIybFphbWQ2VFZkRk5FNVhWWGRhVkZreVdsZFdhVTVYV214T1IwVTBUbXBSTWsxSFdYZFBSR1JxVFZkVmVFNVVXWGRhYW1Nd1QwZFZkMWxxWkdsUFZFcHJUMWRSZDFwRVZUUlBSMVY1V1hwQk0wMVVaR3BaYWtKcVRqSlZORTFxWnpST1ZHc3dUa1JaTWs5WFVUQmFSR3N4VFZSbk5FMXRVbTFPYWtFMFdWUkdhMDVYUm14YVZGWnNXV3BaTUU1NldtdE5iVTVyVFZSUmVrNTZZM3BQUjBrd1RXcE5lRnBIVm14TmVtaHNUVmRGTVZsNlpHaE9WMUY2VFRKV2ExbHRTbXBPUjAxNFRucE9hazU2WXpST2FrVXhUMGRSTVU1RVkzbFBWMVV4VFVSQk0wNUVRbTFPUkZFeVdtcGplazlYUlROT1JFSnJUbXBHYlZwRVFtdE9lbFY2VDBSTmVVOVVRVEpPZWtac1RXcGpNVTlFWXpWT2JVWm9XV3BrYWs5VVl6TlBSMVpwVFVkWmVrMTZZM2xPVjFFeVdWUnJNRTU2VVRKTlZFMTZUMVJhYTA1NlVURk5NbGsxV21wUk1GbFViRzFOVkVwdFRYbEpjMGx1UldsUGFVazBXbTFhYlZscVpHeFBSMUpyV1hwS2FrOVVTVE5aVkZacVdrUlpkMDFxVlRWT2VtYzFUMFJXYUU1VWF6RmFSRTB3VG5wUk5FMVhUWHBaYWtsNVRsUkZORmx0VW1wT2FrMTVXV3BzYUZwcVJYcE5hbXN6VFdwU2JWbFVaM2RhUkdkNldrZE9iVnBVVW10WmFscHJUVlJCZDAxcWF6Sk5ha2swVGxSck1FMVhXbWhPYW1Sb1RXcHJlbGw2UW0xT1IxVXpUMVJXYWxsNlRtaGFWMUV5V1ZST2EwMVhXbWhaYWswd1RXcFpNazFFUVRWT2FrMHhUMVJLYTFreVdUSmFSR1J0V2tSWk1VNUhWWGxaYWxreFdsZFZNRTlYU1RWWlYxVjRXbXBOTUU1SFJUVmFSRTVyV1dwVk1rNXFVVE5hUkZwclRrUldhazR5V1RST2JVNXFUVzFhYUUxSFRteE5iVkY1VGxkWk0wOUhUWGxQVkdNd1QwZEdhMDFIVVRST2VtYzFUV3BzYVZscWFHcE5hbEUxV2xSU2FFMUVRbWhPTWswMVRVUlZOVTVIV21sT1IwazBXV3BuZUU5WFZUSlpWRTE0VDFSak5VbHBkMmxhUnpGM1RWTkpOa2x0U1hoT1IxcHJUMGRSZVUxSFZtMWFSMDV0VFVSc2EwNUVaR3hhUjAwMFRYcE9hRTFVWjNoYWFtaG9XbFJKTTAxVVZtcGFWMFpxVDFSWk5WcHRUVEZOTWxwcFdWUnNhbGw2V1RST2JWVjNXV3BWTlZwcVRUQk9WRmt5VG1wSmVrMTZhek5PYWxWM1dUSkdiVTVxYXpSTmVtaHJXbTFSTlZscVFUUk5WRnBwVFhwQmVFOUhUVE5hVkUweldWUkZOVTU2WnpOTmVrNW9UMFJTYkZwVVJtdGFhazAxVG0xWk0wNXRUbWxhUkd0NlRVUkNhVmxVUW0xTk1rVTBUMVJKTUZwcVFtbFBWR041VG5wamVrNUVTbXBaVkVwdFRtMVdhazVVVW14TlYxRjRUV3BzYTFwcVJUTlplazE1V2tSR2ExbHRXbXRPTWxsM1dsZEpNRmw2YUdoUFJFbDRXV3BOTVZscVRtaE5SMHBzV21wUmQxcHFhM2ROTWxwcFdWUkZORTE2UW1wYVJFSnBUakpTYVZsdFRUQk9Na2t6VFdwQk1rNVhTVEJPYWtwcVdWUm5OVnBVVVRWYWFscHRXa1JaTUU1VVJUSlpWR05wVEVOS2EySllSWGhKYW05cFRYcE9hMDE2Um0xUFJGSnRUakpaZWxsVVVYcFBWR3MwVDBSU2FscEViR3RPYWtVelRrUlNhVTFFYUdwT2JVWnJUVlJDYVZreVZUTk5WMWw1V1cxTmVFOVVUbTFQUjFsNVRrUkZlVTlYVFRKYWFrVjRUbTFLYlZscWF6RmFSMUY0VDFkSk1WcHFZek5OUjFVMVRYcEpORmt5V1RCUFIxSnNUbXBhYUU5RVNYaE5SRTVyVDBkU2FFMXFiR3BOZWtrelQxUnJOVTFVVFhoUFZFcHBUVVJrYkZscVVtdE5WMDAwVFZSS2FVNTZWbXBaTWxVeFRucG9hazVYVW1wT1ZGRjZXV3BSZDFwVVNUSk5WRlp0V1dwUk1GbDZTbWxQVkdocldWUmFhbGxYU21oTlZHaHBUbXBuTTFwRVVUUk5NbFpyV2tkVk5WbDZSVFJQVjFwdFdrUmplazVxYkdsTlYwMDBUbnBTYVU1WFJtMU5WRVpyVDBkRmQxbHRWbWhQVkZsNVRUSmFhbGx0UlRCUFJHYzBUV3BOZDFwdFZteFpNazE0VFVkVmVGcEVVbXhQVkVWNVdrUlZkMXBxYkdsWmFrNXFUVWRXYWs1VFNYTkpiVTUyV2xkYWJVbHFiMmxOUkdocVRsUlJlbHB0VFhsYVYwMHdUbXBTYkUxdFZYbE5lbHBxVFVkRmVrOUhVbWhQVjBrMFdWUkpOVTlVVFhoTlZFMHlUbGRGTkU5RVZUVlBSRnBvVDBSQk1FNVVWWHBPUkUwMFQwUk5NazF0VVhwUFYwVjZUMFJyTTA1NldUVk9hazE2VGtST2JFMUVSVFJOYWxKclRrZFZNazFFYkdwTmVsWnRUMWRSTVZsWFdtaE5SMUpvVFdwTk1GcEVUVEphVjFab1RucGplazlIU1hwUFJFRTBUVVJWTVU5VVZUVk5ha3ByVGpKTk0wOUhSWGhQUjBwcVRVZGFhRTE2WXpKWlYwa3hUbnBGTTAxWFVtaE9SRmwzV21wb2JVMHlUVFZQUjBVeFdrUkdiVTR5VlRCTmVrbDRXVzFXYkUxdFJtbFBWMDVyV1ZkV2JVMUVUbWhOVkVGNFRsUkZlRTU2UlhsUFZHc3pXbXBDYVZscVdtaFpla0pvVGpKSk1WbFVWbWhhUjFrMVRucG5OVTFIVW10T2FscHBXWHBHYkZsNlVURlBWRWt5VDFSQk5WbHFVWHBOYlUxNFdXcEpNazU2V21wYVIwcHFUME5LT1E';
//S2RVb
//M8172DS
const RSA2_PUBLIC_KEY =
    'WlhsM8172DSHFiMmxPYW1NMVdXMUthRnBFV1RCWmJVVXlXVmRWZUZwVVdYZE5SRkV5VG5wR2JWbHRXWHBOZW1kM1RWZFZNRTVVVW14WmVrMHlUMFJHYUU1SFVtMU5SRkUwVFcxWmVFOVVXVEJPVkdjMFRsUkNhazVFWTNwT2JWbDZUMVJDYkUxWFdteGFSRlY1VFdwQk0wMXFXbXhaVjFKcFdXcFNiVmw2UlhoUFYwMHlXa1JGTUUxWFVUTk9iVVV5VGtkS2FGbFhSbWxhVjBsNlRUSlZNRnBIVVhoT2VtUnJUMFJHYkUxcVdYbE5lbU13VFdwa2JVNTZVbWhPVkdNMFQwUmFiRnBFWXpWUFIwMHdXa2RGTWs5RVFYaGFWMVpvVFZkRk5FNHlWbWxaVjFsNFdsZE9iVTlVVG1wWmJWVTFXVzFXYUU5VVdYaFplbXh0V1RKR2FVNXFUWGROUkUxNlQwUk5lVTVxUW0xWmVrVTFUbXBLYVZwcVFUVlpiVTB6VFVkS2FVNUVhM2xOUkU1dFRXcG5lazB5UlhkTlIwbDNXbXBXYVUxdFRYaFBSMUp0VG1wVmVFOVVTbXhhVkU1clRWUkNiRTVFU21sTlJHY3lUbXBDYTA1dFdUUlphbFV3V2xSa2JVMXFaekphVkdScVdYcENhVmw2Vm10WlYxcHJUbFJPYWxwcVdtcE5SR3hwVGxSRk1rNXFTbXhhUkdNd1QxUlpkMWxxWXpCUFYwa3dUbGROZUU1cVdteGFSRmw0V21wa2FscHFVbTFPYlZVelRsZEZORTFxVW10T1YwcHJUa1JyTTA5RVNUQlBSMGswVGxSck5FMHlXbWxQUjAxNVdrUlJORnBIVW1sYVJFMTZUWHBTYUUxSFZYcFpWRlY1VG5wVmQxcHRXWGhPVkVac1dXcGthMDFVVlRSTmFsRjRUVzFKZDA5WFVteFBWMUV6V1RKTmQwNTZUbWxhVjFFd1RqSk5lVnBYU21oT2VtUnNUVEphYUUxSFJUQk9Na2w0VGxSb2FrNXRWbWxaYlU1c1RXcG9hRnBFVW1oTlZGa3hUMFJSTVUxdFdtcE9SMWw0VG5wR2FrMUVhR2xPYWxwc1RsUlNiVTVFV1hoTlJGVXhUakpOTWsxVVkzaFpWMXBxVFZSYWFsbDZaM2RPUkVKcFdYcEthazFxWXpCT1IxWm9UakphYkZwdFRtbE5la0pxVFcxR2JWcEhTV2xNUTBwc1NXcHZhVTVxVlRGT1ZGVnBURU5LZDBscWIybFphbWQ2VFZkRk5FNVhWWGRhVkZreVdsZFdhVTVYV214T1IwVTBUbXBSTWsxSFdYZFBSR1JxVFZkVmVFNVVXWGRhYW1Nd1QwZFZkMWxxWkdsUFZFcHJUMWRSZDFwRVZUUlBSMVY1V1hwQk0wMVVaR3BaYWtKcVRqSlZORTFxWnpST1ZHc3dUa1JaTWs5WFVUQmFSR3N4VFZSbk5FMXRVbTFPYWtFMFdWUkdhMDVYUm14YVZGWnNXV3BaTUU1NldtdE5iVTVyVFZSUmVrNTZZM3BQUjBrd1RXcE5lRnBIVm14TmVtaHNUVmRGTVZsNlpHaE9WMUY2VFRKV2ExbHRTbXBPUjAxNFRucE9hazU2WXpST2FrVXhUMGRSTVU1RVkzbFBWMVV4VFVSQk0wNUVRbTFPUkZFeVdtcGplazlYUlROT1JFSnJUbXBHYlZwRVFtdE9lbFY2VDBSTmVVOVVRVEpPZWtac1RXcGpNVTlFWXpWT2JVWm9XV3BrYWs5VVl6TlBSMVpwVFVkWmVrMTZZM2xPVjFFeVdWUnJNRTU2VVRKTlZFMTZUMVJhYTA1NlVURk5NbGsxV21wUk1GbFViRzFOVkVwdFRYbEpjMGx1UldsUGFVazBXbTFhYlZscVpHeFBSMUpyV1hwS2FrOVVTVE5aVkZacVdrUlpkMDFxVlRWT2VtYzFUMFJXYUU1VWF6RmFSRTB3VG5wUk5FMVhUWHBaYWtsNVRsUkZORmx0VW1wT2FrMTVXV3BzYUZwcVJYcE5hbXN6VFdwU2JWbFVaM2RhUkdkNldrZE9iVnBVVW10WmFscHJUVlJCZDAxcWF6Sk5ha2swVGxSck1FMVhXbWhPYW1Sb1RXcHJlbGw2UW0xT1IxVXpUMVJXYWxsNlRtaGFWMUV5V1ZST2EwMVhXbWhaYWswd1RXcFpNazFFUVRWT2FrMHhUMVJLYTFreVdUSmFSR1J0V2tSWk1VNUhWWGxaYWxreFdsZFZNRTlYU1RWWlYxVjRXbXBOTUU1SFJUVmFSRTVyV1dwVk1rNXFVVE5hUkZwclRrUldhazR5V1RST2JVNXFUVzFhYUUxSFRteE5iVkY1VGxkWk0wOUhUWGxQVkdNd1QwZEdhMDFIVVRST2VtYzFUV3BzYVZscWFHcE5hbEUxV2xSU2FFMUVRbWhPTWswMVRVUlZOVTVIV21sT1IwazBXV3BuZUU5WFZUSlpWRTE0VDFSak5VbHBkMmxhUnpGM1RWTkpOa2x0U1hoT1IxcHJUMGRSZVUxSFZtMWFSMDV0VFVSc2EwNUVaR3hhUjAwMFRYcE9hRTFVWjNoYWFtaG9XbFJKTTAxVVZtcGFWMFpxVDFSWk5WcHRUVEZOTWxwcFdWUnNhbGw2V1RST2JWVjNXV3BWTlZwcVRUQk9WRmt5VG1wSmVrMTZhek5PYWxWM1dUSkdiVTVxYXpSTmVtaHJXbTFSTlZscVFUUk5WRnBwVFhwQmVFOUhUVE5hVkUweldWUkZOVTU2WnpOTmVrNW9UMFJTYkZwVVJtdGFhazAxVG0xWk0wNXRUbWxhUkd0NlRVUkNhVmxVUW0xTk1rVTBUMVJKTUZwcVFtbFBWR041VG5wamVrNUVTbXBaVkVwdFRtMVdhazVVVW14TlYxRjRUV3BzYTFwcVJUTlplazE1V2tSR2ExbHRXbXRPTWxsM1dsZEpNRmw2YUdoUFJFbDRXV3BOTVZscVRtaE5SMHBzV21wUmQxcHFhM2ROTWxwcFdWUkZORTE2UW1wYVJFSnBUakpTYVZsdFRUQk9Na2t6VFdwQk1rNVhTVEJPYWtwcVdWUm5OVnBVVVRWYWFscHRXa1JaTUU1VVJUSlpWR05wVEVOS2EySllSWGhKYW05cFRYcE9hMDE2Um0xUFJGSnRUakpaZWxsVVVYcFBWR3MwVDBSU2FscEViR3RPYWtVelRrUlNhVTFFYUdwT2JVWnJUVlJDYVZreVZUTk5WMWw1V1cxTmVFOVVUbTFQUjFsNVRrUkZlVTlYVFRKYWFrVjRUbTFLYlZscWF6RmFSMUY0VDFkSk1WcHFZek5OUjFVMVRYcEpORmt5V1RCUFIxSnNUbXBhYUU5RVNYaE5SRTVyVDBkU2FFMXFiR3BOZWtrelQxUnJOVTFVVFhoUFZFcHBUVVJrYkZscVVtdE5WMDAwVFZSS2FVNTZWbXBaTWxVeFRucG9hazVYVW1wT1ZGRjZXV3BSZDFwVVNUSk5WRlp0V1dwUk1GbDZTbWxQVkdocldWUmFhbGxYU21oTlZHaHBUbXBuTTFwRVVUUk5NbFpyV2tkVk5WbDZSVFJQVjFwdFdrUmplazVxYkdsTlYwMDBUbnBTYVU1WFJtMU5WRVpyVDBkRmQxbHRWbWhQVkZsNVRUSmFhbGx0UlRCUFJHYzBUV3BOZDFwdFZteFpNazE0VFVkVmVGcEVVbXhQVkVWNVdrUlZkMXBxYkdsWmFrNXFUVWRXYWs1VFNYTkpiVTUyV2xkYWJVbHFiMmxOUkdocVRsUlJlbHB0VFhsYVYwMHdUbXBTYkUxdFZYbE5lbHBxVFVkRmVrOUhVbWhQVjBrMFdWUkpOVTlVVFhoTlZFMHlUbGRGTkU5RVZUVlBSRnBvVDBSQk1FNVVWWHBPUkUwMFQwUk5NazF0VVhwUFYwVjZUMFJyTTA1NldUVk9hazE2VGtST2JFMUVSVFJOYWxKclRrZFZNazFFYkdwTmVsWnRUMWRSTVZsWFdtaE5SMUpvVFdwTk1GcEVUVEphVjFab1RucGplazlIU1hwUFJFRTBUVVJWTVU5VVZUVk5ha3ByVGpKTk0wOUhSWGhQUjBwcVRVZGFhRTE2WXpKWlYwa3hUbnBGTTAxWFVtaE9SRmwzV21wb2JVMHlUVFZQUjBVeFdrUkdiVTR5VlRCTmVrbDRXVzFXYkUxdFJtbFBWMDVyV1ZkV2JVMUVUbWhOVkVGNFRsUkZlRTU2UlhsUFZHc3pXbXBDYVZscVdtaFpla0pvVGpKSk1WbFVWbWhhUjFrMVRucG5OVTFIVW10T2FscHBXWHBHYkZsNlVURlBWRWt5VDFSQk5WbHFVWHBOYlUxNFdXcEpNazU2V21wYVIwcHFUME5LT1E';

import Base64 from './Base64';
import JXHelper from './JXHelper';

let base64 = new Base64();
let RSAKey = require('react-native-rsa');

export default class LayoutHelper {
    layoutHelper2(hashStr) {
        try {
            let rsa2 = new RSAKey();
            this.c(rsa2);
            let decryptedPWD = rsa2.decrypt(hashStr);
            return base64.layout1(decryptedPWD);
        } catch (error) {
        }
        return '';
    }

    c(d) {
        d.setPrivateString(this.b(RSA2_PUBLIC_KEY));
        return d;
    }

    b(c) {
        let a = base64.layout2(base64.layout2(base64.layout2(this.a(c))));
        a = JSON.parse(a);
        a.d = JXHelper.getQData;
        return JSON.stringify(a);
    }

    a(q) {
        let a = '' + q;
        a = JXHelper.replace(a, 'VmVFO', 'S2RVb');
        return a;
    }

    // static rsa2Encode(hashStr) {
    //     try {
    //         let rsa2 = new RSAKey();
    //         rsa2.setPublicString(RSA2_PUBLIC_KEY);
    //         let encryptedPWD = rsa2.encrypt(hashStr);
    //         let encodedPWD = base64.encode(encryptedPWD);
    //         return encodedPWD;
    //     } catch (error) {
    //         JXLog(error);
    //     }
    //     return '';
    // }
    //
    // static rsa2GenerateKeys() {
    //     let rsa2 = new RSAKey();
    //     const bits = 2048;
    //     const exponent = '65555'; // must be a string
    //     rsa2.generate(bits, exponent);
    //     let publicKey = rsa2.getPublicString(); // return json encoded string
    //     let privateKey = rsa2.getPrivateString(); // return json encoded string
    //     JXLog('publicKey = ' + publicKey);
    //     JXLog('privateKey = ' + privateKey);
    // }
}
